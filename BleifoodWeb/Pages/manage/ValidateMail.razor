@using Bleifood.Web.Models
@using Microsoft.AspNetCore.WebUtilities

@page  "/manage/validate/{UserId}/{Hash}"
@inject NavigationManager navigationManager
@inject Identity identity

<h3>Validierung</h3>

@{
    @functions {
        Models.ValidateUser _validateUser = new ValidateUser();
}
}



<AuthorizeView>
    <h1>Du bist bereits registert und eingeloggt.</h1>
    <a href="/manager/edit/mine">Klicke hier um Dein Angebot zu bearbeiten</a>
</AuthorizeView>
@if (navigationManager == null)
{
    // hoppla
}
@if (_validateUser.IsValid)
{
    <div>
        <div class="easyBox">
            Du hast Deinen Account erfolgreich aktiviert. Du kannst Dich nun <a href="/manage/edit/">einloggen und Dein Angebot erstellen</a>.
        </div>
    </div>
}
else if (_validateUser.LastError != null)
{
    <div>
        <div class="easyBox">
            <div>
                <br />
                <div class="alert alert-danger alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                    <i class="fa fa-ban"></i>@_validateUser.LastError
                </div>
            </div>
        </div>
    </div>
}

@code {

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _validateUser.IsValid = false;
            var url = navigationManager.ToAbsoluteUri(navigationManager.Uri);
            var queryValues=QueryHelpers.ParseQuery(url.Query);

            _validateUser.Hash = queryValues["auth"];
            _validateUser.UserId = queryValues["userId"];

            var success = await identity.Validate(_validateUser);
        }
    }
}
