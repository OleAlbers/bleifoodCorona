@using BL
@page  "/manage/edit/mine"
<h3>Meine Daten bearbeiten</h3>
@inject Identity identity
@inject BL.Interfaces.IFoodtruck foodTruckLogic
@inject AppState appState
@inject NavigationManager navigationManager

<AuthorizeView>
    <NotAuthorized>
        <h1>Du bist nicht eingeloggt.</h1><br />
        <a href="/manage/login">Klicke hier um Dich einzuloggen</a>
    </NotAuthorized>
    <Authorized>
        <EditForm OnValidSubmit="HandleValidSubmit" EditContext="_editContext" Context="auth">
            @*Model="@_foodTruck"*@
            <DataAnnotationsValidator />
            <div class="easyBox">
                <div class="simpleForm">
                    <p>
                        Hier kannst Du Dein Angebot bearbeiten. <strong>alle</strong> Felder sind Pflichtfelder<br />
                        Wenn Dir etwas unklar ist, schaue in der Hilfe nach
                    </p>
                    <div class="header"><br /><h4 class="hdr4">Grunddaten</h4></div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control" name="name" @bind-Value="_foodTruck.Name" placeholder="Pauls phänomenale Pommes" />
                        <ValidationMessage For="() => _foodTruck.Name" />
                    </div>
                    <div class="form-group">
                        <label>Url</label>
                        <InputText class="form-control" name="url" @bind-Value="_foodTruck.Url" placeholder="paulspommes" />
                        <ValidationMessage For="() => _foodTruck.Url" />
                        <p>Deine URL lautet dann: https://bleifood.de/@_foodTruck.Url</p>
                    </div>
                    <div class="form-group">
                        <label>Paypal-Me-Adresse</label>
                        <InputText @bind-Value="_foodTruck.PaypalMe" class="form-control" placeholder="http://paypal.me/paulspommes" />
                        <ValidationMessage For="() => _foodTruck.PaypalMe" />
                        <p>Noch keinen Paypal.me - Link? Dieser kann unter <a href="https://www.paypal.me" target="_blank">erstellt werden</a></p>
                    </div>
                    <div class="form-group">
                        <label>Bietest Du Selbstabholung an?</label>
                        <InputCheckbox @bind-Value="_foodTruck.TakeAway" class="form-control" />
                        <ValidationMessage For="() => _foodTruck.TakeAway" />
                    </div>
                    <div class="header"><br /><h4 class="hdr4">Adresse</h4></div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.Name" class="form-control" placeholder="Paul Pfeiffer" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.Name" />
                    </div>
                    <div class="form-group">
                        <label>Strasse</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.Street" class="form-control" placeholder="Eisbärenweg 3" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.Street" />
                    </div>
                    <div class="form-group">
                        <label>PLZ</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.Zip" class="form-control" placeholder="22459" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.Zip" />
                    </div>
                    <div class="form-group">
                        <label>Ort</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.City" class="form-control" placeholder="Hamburg" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.City" />
                    </div>
                    <div class="form-group">
                        <label>Telefon</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.Phone" class="form-control" placeholder="040 123456" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.Phone" />
                    </div>
                    <div class="form-group">
                        <label>E-Mail</label>
                        <InputText @bind-Value="_foodTruck.PostAddress.Mail" class="form-control" placeholder="kontakt@olestollepommes.de" />
                        <ValidationMessage For="() => _foodTruck.PostAddress.Mail" />
                    </div>
                    <div class="header"><br /><h4 class="hdr4">Lieferzeiten</h4></div>
                    <div class="form-group">
                        <label>Früheste Lieferzeit</label>
                        <input type="time" @bind-value="_foodTruck.StartDelivery" class="form-control" placeholder="10:00">
                        <ValidationMessage For="() => _foodTruck.StartDelivery" />
                    </div>
                    <div class="form-group">
                        <label>Späteste Lieferzeit</label>
                        <input type="time" @bind-value="_foodTruck.EndDelivery" @onfocusout="@(q => { ResetValidation("EndDelivery"); })" class="form-control" placeholder="22:00">
                        <ValidationMessage For="() => _foodTruck.EndDelivery" />
                    </div>
                    <div class="form-group">
                        <label>Früheste Bestellzeit</label>
                        <input type="time" @bind-value="_foodTruck.StartOrder" @onfocusout="@(q=> { ResetValidation("StartOrder"); })" class="form-control" placeholder="05:00">
                        <ValidationMessage For="() => _foodTruck.StartOrder" />
                    </div>
                    @if (_foodTruck.InDataBase)
                    {
                        <input class="btn btn-default" type="submit" value="Speichern" />
                    }
                    else
                    {
                        <input class="btn btn-default" type="submit" value="Erstellen" />
                    }

                </div>
                <div style="color:red"><ValidationSummary></ValidationSummary></div>
            </div>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    private Entities.FoodTruck _foodTruck;
    private Guid? _myTruckId;
    private EditContext _editContext;

    protected override void OnInitialized()
    {
        appState.IsInEditMode = true;

    }

    protected void ResetValidation(string field)
    {
        _editContext = new EditContext(_foodTruck);
        ValidateStartDelivery();
        ValidateStartOrder();
    }

    protected async override Task OnInitializedAsync()
    {
        var loggedIn = await identity.IsLoggedIn();
        if (!loggedIn) return;
        _myTruckId = await identity.GetMyTruckId();
        if (_myTruckId == null)
        {
            var currentUser = await identity.GetCurrentUser();
            var now = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
            _foodTruck = new Entities.FoodTruck
            {
                Active = false,
                EndDelivery = now.AddHours(20),
                StartDelivery = now.AddHours(10),
                StartOrder = now.AddHours(6),
                TakeAway = false,
                PostAddress = new Entities.Address(),
                InDataBase = false,
                UserId = currentUser.Id
            };
        }
        else
        {
            _foodTruck = foodTruckLogic.GetTruck(_myTruckId.Value);
        }
        _editContext = new EditContext(_foodTruck);
    }

    private void ValidateStartDelivery()
    {

        if (_foodTruck.StartDelivery >= _foodTruck.EndDelivery)
        {
            var messageStore = new ValidationMessageStore(_editContext);
            messageStore.Add(_editContext.Field("EndDelivery"), "Die späteste Lieferzeit muss später sein als die früheste Lieferzeit");
            _editContext.NotifyValidationStateChanged();
            this.StateHasChanged();

        }
    }

    private void ValidateStartOrder()
    {
        var messageStore = new ValidationMessageStore(_editContext);
        if (_foodTruck.StartOrder >= _foodTruck.StartDelivery)
        {
            messageStore.Add(_editContext.Field("StartOrder"), "Das früheste Bestelldatum darf nicht später sein als die früheste Lieferzeit");
            _editContext.NotifyValidationStateChanged();
            this.StateHasChanged();
        }
    }

    private async void HandleValidSubmit()
    {
        ValidateStartDelivery();
        ValidateStartOrder();

        if (!_editContext.Validate()) return;
        if (!_foodTruck.InDataBase)
        {
            foodTruckLogic.CreateTruck(_foodTruck);
            navigationManager.NavigateTo("/manage/edit/mine/done");
        }
        else
        {
            foodTruckLogic.UpdateTruck(_foodTruck);
        }

    }
}

