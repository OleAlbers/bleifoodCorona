@page "/"
@using BL
@inject BL.Interfaces.IFoodTruck foodTruckLogic
@inject BL.Geocode geoCodeLogic
@inject NavigationManager navigationManager
@inject BL.Interfaces.IBrowserStorage browserStorage

@if (!_customer.PostAddress.IsValid())
{
    <h1>Willkommen bei Bleifood</h1>
    <p>Gib Bitte Deine Adresse ein damit wir schauen können wer Dich heute beliefern kann:</p>
}
<EditForm Model="_customer.PostAddress">
    <div class="form-group quickEnterAdress">
        @if (!_customer.PostAddress.IsValid())
        {
            <label>Adresse</label><span>(Mit Enter bestätigen)</span>
        }
        <input type="text" class="form-keepSpace form-control  @(_customer.PostAddress.IsValid()?"address-success":"") " name="FoodAddress" autocomplete="on" @bind-value="Address" placeholder="Straße Hausnummer, PLZ Ort">
    </div>
</EditForm>


@if (_customer.PostAddress.IsValid())
{
    if (_matches.Count == 0)
    {
        <div><h4 class="hdr1">Ich habe leider keine Foodtrucks in Deiner Nähe gefunden</h4></div>
    }
    else
    {
        <div>
            <h4 class="hdr4">Folgende Foodtrucks sind in Deiner Nähe:</h4>
            @foreach (var truck in _matches)
            {
                <div class="buttonBox hdr1">
                    <p class="pull-left">
                        @truck.Name
                    </p>
                    <a href="@truck.Url" class="btn btn-default btn-sm pull-right">Angebot anzeigen</a>
                    <div class="clearfix"></div>
                </div>
            }
        </div>
    }

}

@*<div class="popupAddress">
        <div class="easyBox full">
            <p>Bevor es losgehen kann brauchen wir noch Deine Lieferadresse</p>
            <p><strong>Wir verwenden Deine Daten ausschließlich um DIr das Essen liefern zu können und speichern nur das was dafür unbedingt notwendig ist.</strong></p>
            <div class="row nomargin">
                <div class="col-md-5">
                    <h4 class="hdr7">Deine Adresse</h4>
                    <p>Damit Dein Essen Dich auch findet</p>
                    <div class="form-group">
                        <label>Dein Name</label>
                        <input type="text" class="form-control" name="name" placeholder="John Doe">
                    </div>
                    <div class="form-group">
                        <label>Straße + Hausnummer</label>
                        <input type="text" class="form-control" name="street" placeholder="ABC-Straße 3">
                    </div>
                    <div class="form-group">
                        <label>PLZ + Ort</label>
                        <input type="text" class="form-control" name="city" placeholder="20459 Hamburg">
                    </div>
                </div>
                <div class="col-md-2"></div>
                <div class="col-md-5">
                    <h4 class="hdr7">Kontakt</h4>
                    <div class="form-group">
                        <label>E-Mail</label>
                        <p>An diese Adresse wird Deine Bestellbestätigung geschickt</p>
                        <input type="email" class="form-control" name="mail" placeholder="john@doe.de">
                    </div>
                    <div class="form-group">
                        <label>Telefon</label>
                        <p>Hierüber kann Dich der Foodtrucker Dich erreichen. Wenn Du das nicht möchtest las das Feld leer</p>
                        <input type="tel" class="form-control" name="phone" placeholder="040 12345">
                    </div>
                    <div class="form-group">
                        <label>Datenverarbeitung</label>
                        <input type="checkbox" class="form-control" name="allowdata">Ich bin damit einverstanden, dass meine Daten gespeichert, verarbeitet und an den Foodtrucker weitergegeben werden.<br />
                    </div>
                </div>
                <input class="btn btn-default" type="submit" value="Submit">
            </div>

        </div>
    </div>*@

@code {
    private Entities.Customer _customer= new Entities.Customer();
    private List<Entities.FoodTruck> _matches = new List<Entities.FoodTruck>();
    private string Address
    {
        get
        {
            return _customer?.PostAddress?.AsString;
        }

        set
        {
            _customer.PostAddress.AsString = value;
            ReloadTrucks();
            StoreAddressToLocalStorage();
        }
    }

    private void StoreAddressToLocalStorage()
    {
        if (!_customer.PostAddress.IsValid()) return;
        browserStorage.StoreData(_customer);
    }

    private async void GetAddressFromLocalStorage()
    {
        if (_customer.PostAddress.IsValid()) return;
        var customer = await browserStorage.ReadData<Entities.Customer>();
        if (customer==null) return;

        _customer= customer;
        ReloadTrucks();
        StateHasChanged();
    }

    private async void ReloadTrucks()
    {
        if (!_customer.PostAddress.IsValid()) return;
        var myCoords = await geoCodeLogic.GetCoordinates(_customer.PostAddress.ToString());

        _matches = foodTruckLogic.GetNearbyTrucks(myCoords, null).ToList();
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAddressFromLocalStorage();
        }
    }
}