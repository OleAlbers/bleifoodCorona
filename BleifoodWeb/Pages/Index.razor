@page "/"
@using BL
@inject BL.Interfaces.IFoodTruck foodTruckLogic
@inject BL.Geocode geoCodeLogic
@inject NavigationManager navigationManager
@inject Identity identity
@inject BL.Interfaces.IBrowserStorage browserStorage

@if (!_customer.PostAddress.IsValid())
{
    <h1>Willkommen bei Bleifood</h1>
    <p>Gib Bitte Deine Adresse ein damit wir schauen können wer Dich heute beliefern kann:</p>
}
<EditForm Model="_customer.PostAddress">
    <div class="form-group quickEnterAdress">
        @if (!_customer.PostAddress.IsValid())
        {
            <label>Adresse</label><span>(Mit Enter bestätigen)</span>
        }
        <input type="text" class="form-keepSpace form-control  @(_customer.PostAddress.IsValid()?"address-success":"") " name="FoodAddress" autocomplete="on" @bind-value="Address" placeholder="Straße Hausnummer, PLZ Ort">
    </div>
</EditForm>

<AuthorizeView>
    <NotAuthorized>
        Sorry. Wir sind noch gar nicht richtig da :)

    </NotAuthorized>
</AuthorizeView>

@if (_customer.PostAddress.IsValid())
{
    if (_matches.Count == 0)
    {
        <div><h4 class="hdr5">Ich habe leider keine Foodtrucks in Deiner Nähe gefunden</h4></div>
    }
    else
    {
        <div>
            <h4 class="hdr4">Folgende Foodtrucks sind in Deiner Nähe:</h4>
            @foreach (var truck in _matches)
            {
                <div class="buttonBox hdr1">
                    <p class="pull-left">
                        @if (!truck.Active)
                        {
                            <i title="Noch nicht aktiviert. Nur DU kannst ihn sehen" class="fas fa-eye-slash"></i>
                        }
                        @truck.Name
                    </p>
                    <a href="@truck.Url" class="btn btn-default btn-sm pull-right">Angebot anzeigen</a>
                    <div class="clearfix"></div>
                </div>
            }
        </div>
    }

}


@code {
    private Entities.Customer _customer = new Entities.Customer();
    private List<Entities.FoodTruck> _matches = new List<Entities.FoodTruck>();
    private Guid? _myTruckId = null;

    private string Address
    {
        get
        {
            _customer = _customer ?? new Entities.Customer();
            return _customer?.PostAddress?.AsString;
        }

        set
        {
            _customer = _customer ?? new Entities.Customer();
            _customer.PostAddress.AsString = value;
            ReloadTrucks();
            StoreAddressToLocalStorage();
        }
    }

    private void StoreAddressToLocalStorage()
    {
        if (!_customer.PostAddress.IsValid()) return;
        browserStorage.StoreData(_customer.PostAddress);
    }

    private async void GetAddressFromLocalStorage()
    {
        if (_customer.PostAddress.IsValid()) return;
        _customer = _customer ?? new Entities.Customer();

        _customer.PostAddress= await browserStorage.ReadData<Entities.Address>();
        if (_customer.PostAddress == null)
        {
            _customer = null;
            return;
        }

        ReloadTrucks();
        StateHasChanged();
    }

    private async void ReloadTrucks()
    {
        if (!_customer.PostAddress.IsValid()) return;
        var myCoords = await geoCodeLogic.GetCoordinates(_customer.PostAddress.ToString());

        _matches = foodTruckLogic.GetNearbyTrucks(myCoords, _myTruckId).ToList();
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAddressFromLocalStorage();
            _myTruckId = await identity.GetMyTruckId();
        }
    }
}