@page "/{truck}"
@using BL
@using System.Globalization
@inject BL.Interfaces.IFoodTruck foodTruckLogic
@inject BL.Interfaces.IOrder orderLogic
@inject BL.Geocode geoCodeLogic
@inject NavigationManager navigationManager
@inject BL.Interfaces.IBrowserStorage browserStorage
@inject Identity identity

@code {
    @functions {
        [Parameter]
        public string Truck { get; set; }
    }
}

<h4 class="hdr1">
    @if (!_truck.Active)
    {
        <i title="Noch nicht aktiviert. Nur DU kannst ihn sehen" class="fas fa-eye-slash"></i>
    }
    @_truck.Name
</h4>

@if (_tooEarly)
{
    <h4>Noch geschlossen</h4>
    <p>Du kannst erst ab @_truck.StartOrder Uhr bestellen. Mach Dir erst mal einen Kaffee und schau später noch mal vorbei</p>
    return;
}

@if (_tooLate)
{
    <h4>Schon geschlossen</h4>
    <p>Es wird leider nur bis @_truck.EndDelivery Uhr geliefert. Versuch es morgen gerne noch mal</p>
    return;
}


<div class="row">
    <div class="col-md-4 col-sm-6">
        @if (HasCategory(Entities.Position.Categories.Soup))
        {
            <div class="menuBox type3 card">
                <div class="top">
                    <i class="fas fa-utensil-spoon"></i>
                    <span>Vorspeisen</span>
                </div>
                <div class="inner">
                    @{
                        bool isFirst = true;

                        @foreach (var product in GetFromCategory(Entities.Position.Categories.Soup))
                        {
                            <div class="media">
                                <div class="pull-left">
                                    <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">
                                        <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>
                                    </div>
                                </div>

                                <div class="media-body">
                                    <span class="title">@product.Name</span>

                                    <p>@product.Subtitle</p>
                                    <span class="price">@product.PriceAsText <em>€</em></span>
                                </div>
                            </div>
                            @if (!isFirst)
                            {
                                <hr />
                            }
                            isFirst = false;
                        }
                    }
                </div>
            </div>
        }
        @if (HasCategory(Entities.Position.Categories.Salad))
        {
            <div class="menuBox type3 card">
                <div class="top">
                    <i class="fas fa-seedling"></i>
                    <span>Salat</span>
                </div>
                <div class="inner">
                    @{
                        bool isFirst = true;

                        @foreach (var product in GetFromCategory(Entities.Position.Categories.Salad))
                        {
                            <div class="media">
                                <div class="pull-left">
                                    <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">
                                        <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>
                                    </div>
                                </div>

                                <div class="media-body">
                                    <span class="title">@product.Name</span>

                                    <p>@product.Subtitle</p>
                                    <span class="price">@product.PriceAsText <em>€</em></span>
                                </div>
                            </div>
                            @if (!isFirst)
                            {
                                <hr />
                            }
                            isFirst = false;
                        }
                    }
                </div>
            </div>
        }
    </div>
    <div class="col-md-4 col-sm-6">
        @if (HasCategory(Entities.Position.Categories.Main))
        {
            <div class="menuBox type3 card">
                <div class="top">
                    <i class="fas fa-utensils"></i>
                    <span>Hauptgerichte</span>
                </div>
                <div class="inner">
                    @{
                        bool isFirst = true;

                        @foreach (var product in GetFromCategory(Entities.Position.Categories.Main))
                        {
                            <div class="media">
                                <div class="pull-left">
                                    <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">

                                        <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>

                                    </div>
                                </div>

                                <div class="media-body">
                                    <span class="title">@product.Name</span>

                                    <p>@product.Subtitle</p>
                                    <span class="price">@product.PriceAsText <em>€</em></span>
                                </div>
                            </div>
                            @if (!isFirst)
                            {
                                <hr />
                            }
                            isFirst = false;
                        }
                    }
                </div>
            </div>
        }
        @if (HasCategory(Entities.Position.Categories.SideOrder))
        {
            <div class="menuBox type3 card">
                <div class="top">
                    <i class="fas fa-drumstick-bite"></i>
                    <span>Beilagen</span>
                </div>
                <div class="inner">
                    @{
                        bool isFirst = true;

                        @foreach (var product in GetFromCategory(Entities.Position.Categories.SideOrder))
                        {
                            <div class="media">
                                <div class="pull-left">
                                    <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">

                                        <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>

                                    </div>
                                </div>

                                <div class="media-body">
                                    <span class="title">@product.Name</span>

                                    <p>@product.Subtitle</p>
                                    <span class="price">@product.PriceAsText <em>€</em></span>
                                </div>
                            </div>
                            @if (!isFirst)
                            {
                                <hr />
                            }
                            isFirst = false;
                        }
                    }
                </div>
            </div>
        }

    </div>
    <div class="clearfix visible-sm"></div>
    <div class="col-md-4 col-sm-12">
        <div class="row">
            <div class="col-md-12 col-sm-6">

                @if (HasCategory(Entities.Position.Categories.Dessert))
                {
                    <div class="menuBox type3 card">
                        <div class="top">
                            <i class="fas fa-ice-cream"></i>
                            <span>Dessert</span>
                        </div>
                        <div class="inner">
                            @{
                                bool isFirst = true;

                                @foreach (var product in GetFromCategory(Entities.Position.Categories.Dessert))
                                {
                                    <div class="media">
                                        <div class="pull-left">
                                            <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">

                                                <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>

                                            </div>
                                        </div>

                                        <div class="media-body">
                                            <span class="title">@product.Name</span>

                                            <p>@product.Subtitle</p>
                                            <span class="price">@product.PriceAsText <em>€</em></span>
                                        </div>
                                    </div>
                                    @if (!isFirst)
                                    {
                                        <hr />
                                    }
                                    isFirst = false;
                                }
                            }
                        </div>
                    </div>
                }
                @if (HasCategory(Entities.Position.Categories.Drink))
                {
                    <div class="menuBox type3 card">
                        <div class="top">
                            <i class="fas fa-wine-bottle"></i>
                            <span>Getränke</span>
                        </div>
                        <div class="inner">
                            @{
                                bool isFirst = true;

                                @foreach (var product in GetFromCategory(Entities.Position.Categories.Drink))
                                {
                                    <div class="media">
                                        <div class="pull-left">
                                            <div @onclick="(q=> AddToCart(product))" class="roundedImg addToCart" data-size="54" title="Zur Bestellung hinzufügen">

                                                <i class="fa fa-2x fa-cart-arrow-down" title="Zur Bestellung hinzufügen"></i>

                                            </div>
                                        </div>

                                        <div class="media-body">
                                            <span class="title">@product.Name</span>

                                            <p>@product.Subtitle</p>
                                            <span class="price">@product.PriceAsText <em>€</em></span>
                                        </div>
                                    </div>
                                    @if (!isFirst)
                                    {
                                        <hr />
                                    }
                                    isFirst = false;
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (_order.Positions.Count > 0)
{
    <div class="row">
        <EditForm Model="_order">
            <h3>Deine Bestellung:</h3>
            <div class="pretty-table table-responsive">
                <table class="table orderTable">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Anzahl</th>
                            <th>Gericht</th>
                            <th align="right">Einzelpreis</th>
                            <th align="right">Gesamtpreis</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _order.Positions)
                        {
                            <tr>
                                <td>@(_order.Positions.IndexOf(item) + 1)</td>
                                <td><a @onclick="(q => Minus(item))"><i class="fas fa-minus-circle"></i></a> <span>@item.Amount </span><a @onclick="(q => Plus(item))"><i class="fas fa-plus-circle"></i></a></td>
                                <td>@item.Position.Name</td>
                                <td align="right">@item.Position.Price.AsCurrency()</td>
                                <td align="right" style="font-weight:bold">@((item.Amount * item.Position.Price).AsCurrency())</td>
                            </tr>
                        }

                        <tr>
                            <td></td>
                            <td></td>
                            <td>Trinkgeld</td>
                            <td align="right">
                                <InputSelectNumber @bind-Value="_order.Tip">
                                    <option selected value="0">@(0m.AsCurrency())</option>
                                    @for (decimal amount = 1; amount <= 25; amount++)
                                        {
                                        <option value="@amount">@amount.AsCurrency()</option>
                                        }
                                    /**/
                                    /**/
                                    /**/
                                    /**/
                                    /**/
                                    /**/
                                </InputSelectNumber>
                            </td>
                            <td align="right" style="font-weight:bold">@_order.Tip.AsCurrency()</td>
                        </tr>
                        <tr>
                            <td></td>
                            <td></td>
                            <td>Lieferkosten</td>
                            <td align="right"></td>
                            <td align="right" style="font-weight:bold">@_order.ShippingCost().AsCurrency()</td>
                        </tr>
                        <tr>
                            <td></td>
                            <td></td>
                            <td style="font-weight:bold">SUMME</td>
                            <td style="font-weight:bold" align="right"></td>
                            <td align="right" style="font-weight:bold; color:darkred">@_order.Total().AsCurrency()</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="right">Gewünschte Lieferzeit:</td>
                            <td>
                                <InputSelect @bind-Value="@_order.TimeSlot.AsString">
                                    <option value="00:00">(bitte wählen)</option>
                                    @foreach (var timeOption in GetTimeOptions())
                                        {
                                        <option value="@timeOption.AsString">@timeOption.AsString</option>
                                        }
                                    /**/
                                    /**/
                                    /**/

                                </InputSelect>
                            </td>
                        </tr>
                    </tbody>
                </table>

                @if (TotalFromPositions() < _truck.MinimumOrderAmount)
                {
                    <div class="moreMoney"><span>Die MindestBestellmenge von @_truck.MinimumOrderAmount.AsCurrency() ist noch nicht erreicht</span></div>
                }
                else
                {
                    <a style="float:right" @onclick="(q=> TakeOrder())" class="btn btn-default">Jetzt kostenpflichtig bestellen</a>
                }

                <div class="col-md-3">
                    <div class="orderAddressSmall">
                        <h4>Lieferadresse:</h4>
                        @if (_order != null && _order.CustomerAddress != null)
                        {
                        <p>
                            @_order.CustomerAddress.Name<br />
                            @_order.CustomerAddress.Street<br />
                            @_order.CustomerAddress.Zip @_order.CustomerAddress.City<br />
                            @_order.CustomerAddress.Mail<br />
                            @_order.CustomerAddress.Phone<br />

                            <a style="cursor:pointer" @onclick="(q => ChangeAddress())">Adresse ändern</a>
                        </p>
                        }
                        <hr>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}

@code {
    private Entities.FoodTruck _truck;
    private IEnumerable<Entities.Position> _positions;
    private Entities.Order _order;
    private bool _askForAddress = false;
    private bool _allowData = false;
    private bool _takeOrder = false;
    private bool _tooLate = false;
    private bool _tooEarly = false;
    private Guid? _myTruckId = null;



    private void CalculateTimes()
    {
        var startTime = GetStartTime(out bool isTooEarly);
        _tooEarly = isTooEarly;
        if (isTooEarly) return;

        if (startTime.CompareTo(_truck.EndDelivery) > 0) _tooLate = true;
    }

    private Entities.Time GetStartTime(out bool isTooEarly)
    {
        isTooEarly = false;
        var now = new Entities.Time(DateTime.Now);
        if (now.CompareTo(_truck.StartOrder) < 0) isTooEarly = true;
        now.Minute += 15;   // at least 15 minutes time to create meal
        now = now.NextQuarter();

        var minTime = _truck.StartDelivery;
        if (now.CompareTo(minTime) > 0) minTime = now;
        return minTime;
    }

    private List<Entities.Time> GetTimeOptions()
    {
        var timeOptions = new List<Entities.Time>();
        var time = GetStartTime(out _);
        while (time.CompareTo(_truck.EndDelivery) < 0)
        {
            timeOptions.Add(new Entities.Time(time.Hour, time.Minute));
            time = time.NextQuarter();
        }
        return timeOptions;
    }

    private void ChangeAddress()
    {
        _askForAddress = true;
        _takeOrder = false;
    }

    public bool HasCategory(Entities.Position.Categories category)
    {
        return _positions.Any(q => q.Category == category);
    }

    public IEnumerable<Entities.Position> GetFromCategory(Entities.Position.Categories category)
    {
        return _positions.Where(q => q.Category == category).OrderBy(q => q.SortOrder);
    }

    private void TakeOrder()
    {
        if (!_order.CustomerAddress.IsValid() || string.IsNullOrWhiteSpace(_order.CustomerAddress.Name))
        {
            _takeOrder = true;
            _askForAddress = true;
            return;
        }
        FinishOrder();
    }

    private void FinishOrder()
    {
        orderLogic.PlaceOrder(_order);
        navigationManager.NavigateTo($"/{_truck.Url}/pay/?amount={_order.Total()}&paypalKey={_order.UniqueKey}");
    }


    private decimal TotalFromPositions()
    {
        return _order.Positions.Sum(q => q.Amount * q.Position.Price);
    }

    public void AddToCart(Entities.Position position)
    {
        var oldPosition = _order.Positions.FirstOrDefault(q => q.Position.Id == position.Id);
        if (oldPosition != null)
        {
            oldPosition.Amount++;
            return;
        }
        _order.Positions.Add(new Entities.OrderPosition
        {
            Position = position,
            Amount = 1
        });
    }

    private void Minus(Entities.OrderPosition position)
    {
        position.Amount--;
        if (position.Amount < 1)
        {
            _order.Positions.Remove(position);
        }
    }

    private void Plus(Entities.OrderPosition position)
    {
        position.Amount++;
    }

    protected override void OnInitialized()

    {
        _truck = foodTruckLogic.GetTruckByUrl(Truck);
        if (_truck == null) navigationManager.NavigateTo("/", true);   // wrong url
        _order = new Entities.Order(_truck);
        _positions = foodTruckLogic.GetCard(_truck.Id);
        CalculateTimes();
    }

    private async void GetAddressFromLocalStorage()
    {
         var  customer = new Entities.Customer();

        customer.PostAddress= await browserStorage.ReadData<Entities.Address>();
        if (customer.PostAddress == null || !customer.PostAddress.IsValid())
        {
            navigationManager.NavigateTo("/"); // No Address Entered
            return;
        }

        _order.CustomerAddress = customer?.PostAddress;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAddressFromLocalStorage();
            _myTruckId = await identity.GetMyTruckId();
        }
    }

    private void StoreAddressToLocalStorage()
    {
        if (!_order.CustomerAddress.IsValid()) return;
        browserStorage.StoreData(_order.CustomerAddress);
    }

    private void SaveAddress()
    {
        _askForAddress = false;
        StoreAddressToLocalStorage();
        if (_takeOrder) FinishOrder();
    }
}



@if (_askForAddress)
{
    <EditForm Model="@_order.CustomerAddress" OnValidSubmit="HandleValidSubmitAddress" Context="customerContext">
        <DataAnnotationsValidator />
        <div class="popupAddress">
            <div class="easyBox full">
                <p>Fast fertig. Überprüfe bitte noch einmal Deine Kontaktdaten</p>
                <p><strong>Wir verwenden Deine Daten ausschließlich um DIr das Essen liefern zu können und speichern nur das was dafür unbedingt notwendig ist.</strong></p>
                <div class="row nomargin">
                    <div class="col-md-5">
                        <h4 class="hdr7">Deine Adresse</h4>
                        <p>Damit Dein Essen Dich auch findet</p>
                        <div class="form-group">
                            <label>Dein Name</label>
                            <input type="text" class="form-control" @bind-value="_order.CustomerAddress.Name" name="name" placeholder="John Doe">
                            <ValidationMessage For="() => _order.CustomerAddress.Name" />
                        </div>
                        <div class="form-group">
                            <label>Straße + Hausnummer</label>
                            <input type="text" class="form-control" @bind-value="_order.CustomerAddress.Street" name="street" placeholder="ABC-Straße 3">
                            <ValidationMessage For="() => _order.CustomerAddress.Street" />
                        </div>
                        <div class="form-group">
                            <label>Ort</label>
                            <input type="text" class="form-control" @bind-value="_order.CustomerAddress.City" name="city" placeholder=" Hamburg">
                            <ValidationMessage For="() => _order.CustomerAddress.City" />
                        </div>
                    </div>
                    <div class="col-md-2"></div>
                    <div class="col-md-5">
                        <h4 class="hdr7">Kontakt</h4>
                        <div class="form-group">
                            <label>E-Mail</label>
                            <p>An diese Adresse wird Deine Bestellbestätigung geschickt</p>
                            <input type="email" class="form-control" @bind-value="_order.CustomerAddress.Mail" name="mail" placeholder="john@doe.de">
                            <ValidationMessage For="() => _order.CustomerAddress.Mail" />
                        </div>
                        <div class="form-group">
                            <label>Telefon</label>
                            <p>Hierüber kann Dich der Foodtrucker Dich erreichen. Wenn Du das nicht möchtest lass das Feld leer</p>
                            <input type="tel" class="form-control" @bind-value="_order.CustomerAddress.Phone" name="phone" placeholder="040 12345">
                            <ValidationMessage For="() => _order.CustomerAddress.Phone" />
                        </div>
                        <div class="form-group">
                            <label>Datenverarbeitung &amp; AGB</label>
                            <input type="checkbox" class="form-control" @bind-value="_allowData" name="allowdata">
                            <p>
                                Ich stimme den Bestimmungen zur <a href="https://olealbers.github.io/bleifoodCorona/dsgvo" target="_blank">Datenverarbeitung</a> und den <a href="https://olealbers.github.io/bleifoodCorona/agb" target="_blank">AGB</a> zu
                            </p>
                        </div>
                    </div>
                    @if (_allowData)
                    {
                        <input class="btn btn-default" type="submit" value="@(_takeOrder?"Kostenpflichtig bestellen":"Daten speichern")" />
                    }
                </div>

            </div>
        </div>
    </EditForm>
}
@code  {
    private async void HandleValidSubmitAddress()
    {
        SaveAddress();
    }
}